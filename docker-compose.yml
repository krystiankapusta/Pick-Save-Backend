services:
  eureka-server:
    build:
      context: ./Eureka_Service
      dockerfile: Dockerfile
    image: ${EUREKA_SERVICE_IMAGE}
    container_name: ${EUREKA_SERVICE_CONTAINER}
    ports:
      - "${EUREKA_SERVICE_PORT}:${EUREKA_SERVICE_PORT}"
    environment:
      SERVER_PORT: ${EUREKA_SERVICE_PORT}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "${EUREKA_HEALTH_CHECK_URL}"]
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 5
    networks:
      - microservices-network

  gateway-server:
    build:
      context: ./Gateway_Service
      dockerfile: Dockerfile
    image: ${EUREKA_GATEWAY_IMAGE}
    container_name: ${EUREKA_GATEWAY_CONTAINER}
    ports:
      - "${GATEWAY_SERVICE_PORT}:${GATEWAY_SERVICE_PORT}"
    environment:
      SERVER_PORT: ${GATEWAY_SERVICE_PORT}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URL}
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network

  postgres-db:
    image: ${DB_IMAGE}
    container_name: ${DB_CONTAINER_NAME}
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AUTH_DB: ${AUTH_DB}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      PRODUCT_DB: ${PRODUCT_DB}
      PRODUCT_DB_USER: ${PRODUCT_DB_USER}
      PRODUCT_DB_PASSWORD: ${PRODUCT_DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_MAPPED_PORT}"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./Database/schema.sh:/docker-entrypoint-initdb.d/schema.sh
      - ./Database/check-db.sh:/docker-entrypoint-initdb.d/check-db.sh
    healthcheck:
      test: [ "CMD-SHELL", "/docker-entrypoint-initdb.d/check-db.sh" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - microservices-network

  pgadmin:
    image: ${PG_IMAGE}
    container_name: ${PG_CONTAINER_NAME}
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASSWORD}
    ports:
      - "${PG_PORT}:${PG_MAPPED_PORT}"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network

  auth-server:
    build:
      context: ./Auth_Service
      dockerfile: Dockerfile
    image: ${AUTH_SERVICE_IMAGE}
    container_name: ${AUTH_SERVICE_CONTAINER}
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URL}
      SPRING_DATASOURCE_URL: ${AUTH_DATASOURCE_URL}
      SPRING_DATASOURCE_PORT: ${AUTH_DB_PORT}
      SPRING_DATASOURCE_USERNAME: ${AUTH_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${AUTH_DB_PASSWORD}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME}
      URL_FRONTEND: ${URL_FRONTEND}
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}
      EMAIL_HOST: ${EMAIL_HOST}
      APP_ADMIN_EMAIL: ${ADMIN_EMAIL}
      APP_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    restart: always
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network

  product-server:
    build:
      context: ./Product_Service
      dockerfile: Dockerfile
    image: ${PRODUCT_SERVICE_IMAGE}
    container_name: ${PRODUCT_SERVICE_CONTAINER}
    ports:
      - "${PRODUCT_SERVICE_PORT}:${PRODUCT_SERVICE_PORT}"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_URL}
      SPRING_DATASOURCE_URL: ${PRODUCT_DATASOURCE_URL}
      SPRING_DATASOURCE_PORT: ${PRODUCT_DB_PORT}
      SPRING_DATASOURCE_USERNAME: ${PRODUCT_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${PRODUCT_DB_PASSWORD}
      PRODUCT_SERVICE_PORT: ${PRODUCT_SERVICE_PORT}
    restart: always
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - microservices-network

volumes:
  db-data:
  pgadmin-data:

networks:
  microservices-network:
    driver: bridge
